"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const telegraf_1 = require("telegraf");
const filters_1 = require("telegraf/filters");
const qrcode = __importStar(require("qrcode"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const dotenv_1 = require("dotenv");
const sharp_1 = __importDefault(require("sharp"));
const svg2png_1 = __importDefault(require("svg2png"));
const axios_1 = __importDefault(require("axios"));
// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
(0, dotenv_1.config)();
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if (!process.env.BOT_TOKEN) {
    console.error('–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    console.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ BOT_TOKEN=your_token_here');
    process.exit(1);
}
// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ temp
function cleanupTempFolder() {
    const tempDir = path.join(__dirname, 'temp');
    if (fs.existsSync(tempDir)) {
        const files = fs.readdirSync(tempDir);
        for (const file of files) {
            const filePath = path.join(tempDir, file);
            try {
                fs.unlinkSync(filePath);
            }
            catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
            }
        }
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏
function processUrl(text) {
    text = text.trim();
    if (!text.match(/^https?:\/\//i)) {
        text = 'https://' + text;
    }
    return text;
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
async function downloadFile(url, filePath) {
    const response = await (0, axios_1.default)({
        method: 'GET',
        url: url,
        responseType: 'stream'
    });
    const writer = fs.createWriteStream(filePath);
    response.data.pipe(writer);
    return new Promise((resolve, reject) => {
        writer.on('finish', resolve);
        writer.on('error', reject);
    });
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
async function generateQRWithLogo(url, logoPath, quality = 'high') {
    const tempDir = path.join(__dirname, 'temp');
    if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir);
    }
    const unique = `${Date.now()}_${Math.floor(Math.random() * 100000)}`;
    const qrCodePath = path.join(tempDir, `${unique}_qr.png`);
    const qrFinalPath = path.join(tempDir, `${unique}_qr_final.png`);
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    const qualitySettings = {
        standard: { qrSize: 400, margin: 20, logoSize: 100, padding: 25, roundedRadius: 0 },
        high: { qrSize: 800, margin: 40, logoSize: 200, padding: 50, roundedRadius: 0 },
        ultra: { qrSize: 1600, margin: 80, logoSize: 400, padding: 100, roundedRadius: 0 }
    };
    const settings = qualitySettings[quality];
    const { qrSize, margin, logoSize, padding, roundedRadius } = settings;
    const whiteCircleRadius = (logoSize + padding * 2) / 2;
    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É QR-–∫–æ–¥–∞ —á–µ—Ä–µ–∑ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π API
    const qr = qrcode.create(url, {
        errorCorrectionLevel: 'H'
    });
    const moduleCount = qr.modules.size;
    // –†–∞–∑–º–µ—Ä QR-–∫–æ–¥–∞ –±–µ–∑ margin (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±–ª–∞—Å—Ç—å)
    const qrContentSize = qrSize - (margin * 2);
    // –°–æ–∑–¥–∞–µ–º SVG —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü–µ–π (–±–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ —Ü–µ–Ω—Ç—Ä–µ)
    let svgString = `<svg width="${qrSize}" height="${qrSize}" xmlns="http://www.w3.org/2000/svg" shape-rendering="crispEdges" image-rendering="crisp-edges">`;
    // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
    svgString += `<rect x="0" y="0" width="${qrSize}" height="${qrSize}" fill="#ffffff"/>`;
    const cellSize = qrContentSize / moduleCount;
    const centerX = moduleCount / 2;
    const centerY = moduleCount / 2;
    for (let row = 0; row < moduleCount; row++) {
        for (let col = 0; col < moduleCount; col++) {
            const isDark = qr.modules.get(row, col);
            // –°–¥–≤–∏–≥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ margin
            const x = col * cellSize + margin;
            const y = row * cellSize + margin;
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
            const dx = (col - centerX) * cellSize;
            const dy = (row - centerY) * cellSize;
            const distance = Math.sqrt(dx * dx + dy * dy);
            // –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–∞ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞, –¥–µ–ª–∞–µ–º –µ–≥–æ –±–µ–ª—ã–º
            if (distance < whiteCircleRadius) {
                svgString += `<rect x="${x}" y="${y}" width="${cellSize}" height="${cellSize}" fill="#ffffff"/>`;
            }
            else {
                svgString += `<rect x="${x}" y="${y}" width="${cellSize}" height="${cellSize}" fill="${isDark ? '#000000' : '#ffffff'}"/>`;
            }
        }
    }
    svgString += '</svg>';
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    const svgBuffer = Buffer.from(svgString);
    const pngBuffer = await (0, sharp_1.default)(svgBuffer)
        .png({
        quality: 100,
        compressionLevel: 0,
        adaptiveFiltering: false,
        force: true
    })
        .toBuffer();
    fs.writeFileSync(qrCodePath, pngBuffer);
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –µ–≥–æ
    if (logoPath) {
        try {
            let logoBuffer;
            if (logoPath.endsWith('.svg')) {
                const svgBuffer = fs.readFileSync(logoPath);
                logoBuffer = await (0, svg2png_1.default)(svgBuffer, { width: logoSize, height: logoSize });
            }
            else {
                logoBuffer = fs.readFileSync(logoPath);
            }
            // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ —Ü–µ–Ω—Ç—Ä QR-–∫–æ–¥–∞ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            await (0, sharp_1.default)(qrCodePath)
                .composite([
                {
                    input: logoBuffer,
                    top: Math.floor((qrSize - logoSize) / 2),
                    left: Math.floor((qrSize - logoSize) / 2)
                }
            ])
                .png({
                quality: 100,
                compressionLevel: 0,
                adaptiveFiltering: false,
                force: true
            })
                .toFile(qrFinalPath);
            // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª
            fs.unlinkSync(qrCodePath);
            return qrFinalPath;
        }
        catch (error) {
            console.error('Error adding logo to QR code:', error);
            return qrCodePath; // fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π QR
        }
    }
    return qrCodePath;
}
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new telegraf_1.Telegraf(process.env.BOT_TOKEN);
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
async function setupCommands() {
    try {
        await bot.telegram.setMyCommands([
            { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
            { command: 'create', description: 'üîÑ –°–æ–∑–¥–∞—Ç—å –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π QR-–∫–æ–¥' },
            { command: 'help', description: 'üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞' },
            { command: 'cancel', description: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é' }
        ]);
        console.log('Menu commands set successfully');
    }
    catch (error) {
        console.error('Error setting menu commands:', error);
    }
}
setupCommands();
// –û—á–∏—Å—Ç–∫–∞ temp –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
cleanupTempFolder();
// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ temp –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
setInterval(cleanupTempFolder, 6 * 60 * 60 * 1000);
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
    const welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö QR-–∫–æ–¥–æ–≤.

üìù –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥"
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ, –≤—ã—Å–æ–∫–æ–µ –∏–ª–∏ —É–ª—å—Ç—Ä–∞
3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø QR-–∫–æ–¥–∞: —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏–ª–∏ –±–µ–∑
4. –ï—Å–ª–∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG
5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É
6. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π QR-–∫–æ–¥

‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ (–¥–æ 1600x1600px)
- –ß–µ—Ç–∫–∏–µ –∫—Ä–∞—è –±–µ–∑ —Ä–∞–∑–º—ã—Ç–∏—è
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/create - –°–æ–∑–¥–∞—Ç—å –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π QR-–∫–æ–¥
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
    `;
    await ctx.reply(welcomeMessage, telegraf_1.Markup.keyboard([
        ['üîÑ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥']
    ]).resize());
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /create
bot.command('create', async (ctx) => {
    const userId = ctx.from.id;
    userStates.set(userId, { awaitingChoice: false, awaitingLogo: false, awaitingUrl: false, awaitingQuality: true });
    await ctx.reply('–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ QR-–∫–æ–¥–∞:', telegraf_1.Markup.keyboard([
        ['üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (400px)', 'üñ•Ô∏è –í—ã—Å–æ–∫–æ–µ (800px)'],
        ['üé® –£–ª—å—Ç—Ä–∞ (1600px)'],
        ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
    ]).resize());
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
bot.command('cancel', async (ctx) => {
    const userId = ctx.from.id;
    userStates.delete(userId);
    await ctx.reply('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', telegraf_1.Markup.keyboard([
        ['üîÑ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥']
    ]).resize());
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.command('help', async (ctx) => {
    const helpMessage = `
üìù –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /create
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (400px), –≤—ã—Å–æ–∫–æ–µ (800px) –∏–ª–∏ —É–ª—å—Ç—Ä–∞ (1600px)
3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø QR-–∫–æ–¥–∞: —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏–ª–∏ –±–µ–∑
4. –ï—Å–ª–∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG
5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è QR-–∫–æ–¥–∞
6. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π QR-–∫–æ–¥

‚ú® –£—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞:
- üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ: 400x400px, –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
- üñ•Ô∏è –í—ã—Å–æ–∫–æ–µ: 800x800px, –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
- üé® –£–ª—å—Ç—Ä–∞: 1600x1600px, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Å—ã–ª–∫–∏: 2048 —Å–∏–º–≤–æ–ª–æ–≤
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
- –õ–æ–≥–æ—Ç–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG
- –£–ª—å—Ç—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
    `;
    await ctx.reply(helpMessage);
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥"
bot.hears('üîÑ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥', async (ctx) => {
    const userId = ctx.from.id;
    userStates.set(userId, { awaitingChoice: false, awaitingLogo: false, awaitingUrl: false, awaitingQuality: true });
    await ctx.reply('–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ QR-–∫–æ–¥–∞:', telegraf_1.Markup.keyboard([
        ['üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (400px)', 'üñ•Ô∏è –í—ã—Å–æ–∫–æ–µ (800px)'],
        ['üé® –£–ª—å—Ç—Ä–∞ (1600px)'],
        ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
    ]).resize());
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
bot.hears('üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (400px)', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    if (state?.awaitingQuality) {
        state.awaitingQuality = false;
        state.awaitingChoice = true;
        state.quality = 'standard';
        userStates.set(userId, state);
        await ctx.reply('–í—ã–±–µ—Ä–∏ —Ç–∏–ø QR-–∫–æ–¥–∞:', telegraf_1.Markup.keyboard([
            ['‚úÖ –° –ª–æ–≥–æ—Ç–∏–ø–æ–º'],
            ['‚ùå –ë–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞'],
            ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
        ]).resize());
    }
});
bot.hears('üñ•Ô∏è –í—ã—Å–æ–∫–æ–µ (800px)', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    if (state?.awaitingQuality) {
        state.awaitingQuality = false;
        state.awaitingChoice = true;
        state.quality = 'high';
        userStates.set(userId, state);
        await ctx.reply('–í—ã–±–µ—Ä–∏ —Ç–∏–ø QR-–∫–æ–¥–∞:', telegraf_1.Markup.keyboard([
            ['‚úÖ –° –ª–æ–≥–æ—Ç–∏–ø–æ–º'],
            ['‚ùå –ë–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞'],
            ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
        ]).resize());
    }
});
bot.hears('üé® –£–ª—å—Ç—Ä–∞ (1600px)', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    if (state?.awaitingQuality) {
        state.awaitingQuality = false;
        state.awaitingChoice = true;
        state.quality = 'ultra';
        userStates.set(userId, state);
        await ctx.reply('–í—ã–±–µ—Ä–∏ —Ç–∏–ø QR-–∫–æ–¥–∞:', telegraf_1.Markup.keyboard([
            ['‚úÖ –° –ª–æ–≥–æ—Ç–∏–ø–æ–º'],
            ['‚ùå –ë–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞'],
            ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
        ]).resize());
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–° –ª–æ–≥–æ—Ç–∏–ø–æ–º"
bot.hears('‚úÖ –° –ª–æ–≥–æ—Ç–∏–ø–æ–º', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    if (state?.awaitingChoice) {
        state.awaitingChoice = false;
        state.awaitingLogo = true;
        state.awaitingUrl = false;
        userStates.set(userId, state);
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å –ª–æ–≥–æ—Ç–∏–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG.', telegraf_1.Markup.keyboard([
            ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
        ]).resize());
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ë–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞"
bot.hears('‚ùå –ë–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    if (state?.awaitingChoice) {
        state.awaitingChoice = false;
        state.awaitingLogo = false;
        state.awaitingUrl = true;
        userStates.set(userId, state);
        const qualityText = state.quality === 'ultra' ? '—É–ª—å—Ç—Ä–∞' :
            state.quality === 'high' ? '–≤—ã—Å–æ–∫–æ–º' : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º';
        await ctx.reply(`–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è QR-–∫–æ–¥–∞ –≤ ${qualityText} –∫–∞—á–µ—Å—Ç–≤–µ.`, telegraf_1.Markup.keyboard([
            ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
        ]).resize());
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
bot.hears('üîô –û—Ç–º–µ–Ω–∏—Ç—å', async (ctx) => {
    const userId = ctx.from.id;
    userStates.delete(userId);
    await ctx.reply('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', telegraf_1.Markup.keyboard([
        ['üîÑ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥']
    ]).resize());
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
bot.on('photo', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    if (state?.awaitingLogo) {
        try {
            const photo = ctx.message.photo[ctx.message.photo.length - 1];
            const file = await ctx.telegram.getFile(photo.file_id);
            const logoPath = path.join(__dirname, 'temp', `logo_${Date.now()}.svg`);
            // –°–∫–∞—á–∏–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø
            await downloadFile(`https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`, logoPath);
            state.logoPath = logoPath;
            state.awaitingLogo = false;
            state.awaitingUrl = true;
            userStates.set(userId, state);
            const qualityText = state.quality === 'ultra' ? '—É–ª—å—Ç—Ä–∞' :
                state.quality === 'high' ? '–≤—ã—Å–æ–∫–æ–º' : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º';
            await ctx.reply(`–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è QR-–∫–æ–¥–∞ –≤ ${qualityText} –∫–∞—á–µ—Å—Ç–≤–µ.`, telegraf_1.Markup.keyboard([
                ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
            ]).resize());
        }
        catch (error) {
            console.error('Error processing logo:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SVG-–¥–æ–∫—É–º–µ–Ω—Ç–∞
bot.on('document', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    if (state?.awaitingLogo) {
        try {
            const document = ctx.message.document;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ SVG
            if (!document.file_name || !document.file_name.endsWith('.svg')) {
                await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG.');
                return;
            }
            const file = await ctx.telegram.getFile(document.file_id);
            const logoPath = path.join(__dirname, 'temp', `logo_${Date.now()}.svg`);
            await downloadFile(`https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`, logoPath);
            state.logoPath = logoPath;
            state.awaitingLogo = false;
            state.awaitingUrl = true;
            userStates.set(userId, state);
            const qualityText = state.quality === 'ultra' ? '—É–ª—å—Ç—Ä–∞' :
                state.quality === 'high' ? '–≤—ã—Å–æ–∫–æ–º' : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º';
            await ctx.reply(`–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è QR-–∫–æ–¥–∞ –≤ ${qualityText} –∫–∞—á–µ—Å—Ç–≤–µ.`, telegraf_1.Markup.keyboard([
                ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
            ]).resize());
        }
        catch (error) {
            console.error('Error processing SVG logo:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on((0, filters_1.message)('text'), async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    const text = ctx.message.text;
    if (state?.awaitingUrl) {
        let processedUrl;
        try {
            processedUrl = processUrl(text);
            new URL(processedUrl);
        }
        catch {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É!');
            return;
        }
        try {
            const quality = state.quality || 'high';
            const qrCodePath = await generateQRWithLogo(processedUrl, state.logoPath, quality);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
            await ctx.replyWithPhoto({ source: qrCodePath });
            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            setTimeout(() => {
                if (fs.existsSync(qrCodePath)) {
                    try {
                        fs.unlinkSync(qrCodePath);
                    }
                    catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${qrCodePath}:`, error);
                    }
                }
            }, 5 * 60 * 1000);
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userStates.delete(userId);
        }
        catch (error) {
            console.error('Error generating QR code:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
});
// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
    console.log('Bot started successfully!');
}).catch((error) => {
    console.error('Error starting bot:', error);
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
    cleanupTempFolder();
    bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
    cleanupTempFolder();
    bot.stop('SIGTERM');
});
