import { Telegraf, Markup } from 'telegraf';
import { message } from 'telegraf/filters';
import * as qrcode from 'qrcode';
import * as fs from 'fs';
import * as path from 'path';
import { config } from 'dotenv';
import sharp from 'sharp';
import svg2png from 'svg2png';
import axios from 'axios';
import { database } from './database';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if (!process.env.BOT_TOKEN) {
    console.error('–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    console.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ BOT_TOKEN=your_token_here');
    process.exit(1);
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
interface RenderSettings {
    roundedRadius: number;    // –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤ –º–æ–¥—É–ª–µ–π (0 = –∫–≤–∞–¥—Ä–∞—Ç—ã)
    moduleStyle: 'square' | 'diamond' | 'circle'; // –°—Ç–∏–ª—å –º–æ–¥—É–ª–µ–π
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserState {
    awaitingChoice: boolean;  // –æ–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä –º–µ–∂–¥—É "–° –ª–æ–≥–æ—Ç–∏–ø–æ–º" –∏–ª–∏ "–ë–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞"
    awaitingLogo: boolean;   // –æ–∂–∏–¥–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø
    awaitingUrl: boolean;     // –æ–∂–∏–¥–∞–µ–º —Å—Å—ã–ª–∫—É
    awaitingQuality: boolean; // –æ–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞
    awaitingRenderSettings: boolean; // –æ–∂–∏–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    logoPath?: string;
    quality?: 'standard' | 'high' | 'ultra';
    renderSettings?: RenderSettings; // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map<number, UserState>();

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
const renderSettingsPresets: Record<string, RenderSettings> = {
    '–ö–≤–∞–¥—Ä–∞—Ç—ã': { roundedRadius: 0, moduleStyle: 'square' },
    '–°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ': { roundedRadius: 8, moduleStyle: 'square' },
    '–ö—Ä—É–≥–ª—ã–µ': { roundedRadius: 0, moduleStyle: 'circle' }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ temp
function cleanupTempFolder() {
    const tempDir = path.join(__dirname, 'temp');
    
    if (fs.existsSync(tempDir)) {
        const files = fs.readdirSync(tempDir);
        for (const file of files) {
            const filePath = path.join(tempDir, file);
            try {
                fs.unlinkSync(filePath);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏
function processUrl(text: string): string {
    text = text.trim();
    if (!text.match(/^https?:\/\//i)) {
        text = 'https://' + text;
    }
    return text;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
async function downloadFile(url: string, filePath: string): Promise<void> {
    const response = await axios({
        method: 'GET',
        url: url,
        responseType: 'stream'
    });

    const writer = fs.createWriteStream(filePath);
    response.data.pipe(writer);

    return new Promise((resolve, reject) => {
        writer.on('finish', resolve);
        writer.on('error', reject);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
async function generateQRWithLogo(
    url: string, 
    logoPath?: string, 
    quality: 'standard' | 'high' | 'ultra' = 'high',
    renderSettings?: RenderSettings
): Promise<string> {
    const tempDir = path.join(__dirname, 'temp');
    if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir);
    }
    const unique = `${Date.now()}_${Math.floor(Math.random() * 100000)}`;
    const qrCodePath = path.join(tempDir, `${unique}_qr.png`);
    const qrFinalPath = path.join(tempDir, `${unique}_qr_final.png`);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    const qualitySettings = {
        standard: { qrSize: 400, margin: 20, logoSize: 100, padding: 25 },
        high: { qrSize: 800, margin: 40, logoSize: 200, padding: 50 },
        ultra: { qrSize: 1600, margin: 80, logoSize: 400, padding: 100 }
    };

    const settings = qualitySettings[quality];
    const { qrSize, margin, logoSize, padding } = settings;
    const whiteCircleRadius = (logoSize + padding * 2) / 2 * 0.85; // –£–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 15%
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const roundedRadius = renderSettings?.roundedRadius ?? 0;
    const moduleStyle = renderSettings?.moduleStyle ?? 'square';

    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É QR-–∫–æ–¥–∞ —á–µ—Ä–µ–∑ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π API
    const qr = qrcode.create(url, {
        errorCorrectionLevel: 'H'
    });

    const moduleCount = qr.modules.size;
    
    // –†–∞–∑–º–µ—Ä QR-–∫–æ–¥–∞ –±–µ–∑ margin (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±–ª–∞—Å—Ç—å)
    const qrContentSize = qrSize - (margin * 2);
    
    // –°–æ–∑–¥–∞–µ–º SVG —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü–µ–π (–±–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ —Ü–µ–Ω—Ç—Ä–µ)
    let svgString = `<svg width="${qrSize}" height="${qrSize}" xmlns="http://www.w3.org/2000/svg" shape-rendering="crispEdges" image-rendering="crisp-edges">`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
    svgString += `<rect x="0" y="0" width="${qrSize}" height="${qrSize}" fill="#ffffff"/>`;
    
    const cellSize = qrContentSize / moduleCount;
    const centerX = moduleCount / 2;
    const centerY = moduleCount / 2;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–æ–¥—É–ª—è
    function renderModule(x: number, y: number, isDark: boolean, color: string): string {
        if (moduleStyle === 'circle') {
            // –ö—Ä—É–≥–ª—ã–µ –º–æ–¥—É–ª–∏
            const radius = cellSize / 2 * 0.9; // 90% —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
            return `<circle cx="${x + cellSize / 2}" cy="${y + cellSize / 2}" r="${radius}" fill="${color}"/>`;
        } else {
            // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏ (—Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º)
            return `<rect x="${x}" y="${y}" width="${cellSize}" height="${cellSize}" rx="${roundedRadius}" ry="${roundedRadius}" fill="${color}"/>`;
        }
    }

    for (let row = 0; row < moduleCount; row++) {
        for (let col = 0; col < moduleCount; col++) {
            const isDark = qr.modules.get(row, col);
            // –°–¥–≤–∏–≥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ margin
            const x = col * cellSize + margin;
            const y = row * cellSize + margin;
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
            const dx = (col - centerX) * cellSize;
            const dy = (row - centerY) * cellSize;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            // –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–∞ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞, –¥–µ–ª–∞–µ–º –µ–≥–æ –±–µ–ª—ã–º
            if (distance < whiteCircleRadius) {
                svgString += renderModule(x, y, false, '#ffffff');
            } else {
                svgString += renderModule(x, y, false, isDark ? '#000000' : '#ffffff');
            }
        }
    }
    svgString += '</svg>';

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    const svgBuffer = Buffer.from(svgString);
    const pngBuffer = await sharp(svgBuffer)
        .png({ 
            quality: 100, 
            compressionLevel: 0,
            adaptiveFiltering: false,
            force: true
        })
        .toBuffer();
    fs.writeFileSync(qrCodePath, pngBuffer);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –µ–≥–æ
    if (logoPath) {
        try {
            let logoBuffer: Buffer;
            if (logoPath.endsWith('.svg')) {
                const svgBuffer = fs.readFileSync(logoPath);
                logoBuffer = await svg2png(svgBuffer, { width: logoSize, height: logoSize });
            } else {
                logoBuffer = fs.readFileSync(logoPath);
            }

            // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ —Ü–µ–Ω—Ç—Ä QR-–∫–æ–¥–∞ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            await sharp(qrCodePath)
                .composite([
                    {
                        input: logoBuffer,
                        top: Math.floor((qrSize - logoSize) / 2),
                        left: Math.floor((qrSize - logoSize) / 2)
                    }
                ])
                .png({ 
                    quality: 100, 
                    compressionLevel: 0,
                    adaptiveFiltering: false,
                    force: true
                })
                .toFile(qrFinalPath);

            // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª
            fs.unlinkSync(qrCodePath);
            return qrFinalPath;
        } catch (error) {
            console.error('Error adding logo to QR code:', error);
            return qrCodePath; // fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π QR
        }
    }

    return qrCodePath;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
async function setupCommands() {
    try {
        await bot.telegram.setMyCommands([
            { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
            { command: 'create', description: 'üîÑ –°–æ–∑–¥–∞—Ç—å –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π QR-–∫–æ–¥' },
            { command: 'balance', description: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö QR-–∫–æ–¥–æ–≤' },
            { command: 'pay', description: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–µ–º–∏—É–º-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏' },
            { command: 'help', description: 'üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞' },
            { command: 'cancel', description: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é' }
        ]);
        console.log('Menu commands set successfully');
    } catch (error) {
        console.error('Error setting menu commands:', error);
    }
}

setupCommands();

// –û—á–∏—Å—Ç–∫–∞ temp –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
cleanupTempFolder();

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ temp –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
setInterval(cleanupTempFolder, 6 * 60 * 60 * 1000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
    try {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        const user = await database.getOrCreateUser(
            ctx.from.id,
            ctx.from.username || null,
            ctx.from.first_name || null,
            ctx.from.last_name || null
        );

        const welcomeMessage = `
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö QR-–∫–æ–¥–æ–≤.

üìä –¢–≤–æ–π –±–∞–ª–∞–Ω—Å:
üì± –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ QR-–∫–æ–¥—ã (400px): ${user.freeStandardAvailable} —à—Ç.
üñ•Ô∏è –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (800px): ${user.premiumHighAvailable} —à—Ç.
üé® –£–ª—å—Ç—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–æ (1600px): ${user.premiumUltraAvailable} —à—Ç.

üìù –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –º–æ–¥—É–ª–µ–π: –∫–≤–∞–¥—Ä–∞—Ç—ã, —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∏–ª–∏ –∫—Ä—É–≥–ª—ã–µ
3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ, –≤—ã—Å–æ–∫–æ–µ –∏–ª–∏ —É–ª—å—Ç—Ä–∞
4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø QR-–∫–æ–¥–∞: —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏–ª–∏ –±–µ–∑
5. –ï—Å–ª–∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG
6. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É
7. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π QR-–∫–æ–¥

‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ –º–æ–¥—É–ª–µ–π (–∫–≤–∞–¥—Ä–∞—Ç—ã, —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ, –∫—Ä—É–≥–ª—ã–µ)
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ (–¥–æ 1600x1600px)
- –ß–µ—Ç–∫–∏–µ –∫—Ä–∞—è –±–µ–∑ —Ä–∞–∑–º—ã—Ç–∏—è
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/create - –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥
/pay - –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
    `;

        await ctx.reply(welcomeMessage, Markup.keyboard([
            ['üîÑ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥']
        ]).resize());
    } catch (error) {
        console.error('Error in /start:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /create
bot.command('create', async (ctx) => {
    const userId = ctx.from.id;
    userStates.set(userId, { awaitingChoice: false, awaitingLogo: false, awaitingUrl: false, awaitingQuality: false, awaitingRenderSettings: true });

    await ctx.reply(
        '–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –º–æ–¥—É–ª–µ–π QR-–∫–æ–¥–∞:',
        Markup.keyboard([
            ['–ö–≤–∞–¥—Ä–∞—Ç—ã', '–°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ'],
            ['–ö—Ä—É–≥–ª—ã–µ'],
            ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
        ]).resize()
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
bot.command('cancel', async (ctx) => {
    const userId = ctx.from.id;
    userStates.delete(userId);

    await ctx.reply(
        '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        Markup.keyboard([
            ['üîÑ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥']
        ]).resize()
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /balance
bot.command('balance', async (ctx) => {
    try {
        const userId = ctx.from.id;
        const user = await database.getUser(userId);
        
        if (!user) {
            await ctx.reply('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
        const payments = await database.getUserPayments(userId);
        
        const balanceMessage = `
üìä –¢–≤–æ–π –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö QR-–∫–æ–¥–æ–≤:

üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (400x400px)
   –î–æ—Å—Ç—É–ø–Ω–æ: ${user.freeStandardAvailable} —à—Ç.
   üí∞ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ (–Ω–∞—á–∞–ª—å–Ω—ã–µ 5 —à—Ç.)

üñ•Ô∏è –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (800x800px)
   –î–æ—Å—Ç—É–ø–Ω–æ: ${user.premiumHighAvailable} —à—Ç.
   üí∞ –ü—Ä–µ–º–∏—É–º (–ø–æ–∫—É–ø–∫–∞ –∑–∞ Stars)

üé® –£–ª—å—Ç—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–æ (1600x1600px)
   –î–æ—Å—Ç—É–ø–Ω–æ: ${user.premiumUltraAvailable} —à—Ç.
   üí∞ –ü—Ä–µ–º–∏—É–º (–ø–æ–∫—É–ø–∫–∞ –∑–∞ Stars)

üí∞ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${user.totalSpentStars} ‚≠êStars

${payments.length > 0 ? '\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–æ–∫—É–ø–∫–∏:\n' + 
    payments.slice(0, 3).map((p, i) => 
        `${i + 1}. ${p.productType === 'high_quality' ? 'üñ•Ô∏è High' : 'üé® Ultra'} - ${p.quantity} —à—Ç. (${p.amount}‚≠ê)`
    ).join('\n') : ''}

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö QR-–∫–æ–¥–æ–≤ (400x400px)
‚Ä¢ High –∫–∞—á–µ—Å—Ç–≤–æ –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—á–∞—Ç–∏
‚Ä¢ Ultra –∫–∞—á–µ—Å—Ç–≤–æ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ

üîÑ –°–æ–∑–¥–∞—Ç—å QR: /create
üí≥ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç—ã: /pay
        `;
        
        await ctx.reply(balanceMessage);
    } catch (error) {
        console.error('Error in /balance:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.command('help', async (ctx) => {
    const helpMessage = `
üìù –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /create
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –º–æ–¥—É–ª–µ–π: –ö–≤–∞–¥—Ä–∞—Ç—ã, –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∏–ª–∏ –ö—Ä—É–≥–ª—ã–µ
3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (400px), –≤—ã—Å–æ–∫–æ–µ (800px) –∏–ª–∏ —É–ª—å—Ç—Ä–∞ (1600px)
4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø QR-–∫–æ–¥–∞: —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏–ª–∏ –±–µ–∑
5. –ï—Å–ª–∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG
6. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è QR-–∫–æ–¥–∞
7. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π QR-–∫–æ–¥

‚ú® –°—Ç–∏–ª–∏ –º–æ–¥—É–ª–µ–π:
- –ö–≤–∞–¥—Ä–∞—Ç—ã: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —É–≥–ª–æ–≤–∞—Ç—ã–µ –º–æ–¥—É–ª–∏
- –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ: –∫–≤–∞–¥—Ä–∞—Ç—ã —Å–æ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
- –ö—Ä—É–≥–ª—ã–µ: –∫—Ä—É–≥–ª—ã–µ –º–æ–¥—É–ª–∏

‚ú® –£—Ä–æ–≤–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–∞:
- üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ: 400x400px, –±–µ—Å–ø–ª–∞—Ç–Ω–æ (5 —à—Ç.)
- üñ•Ô∏è –í—ã—Å–æ–∫–æ–µ: 800x800px, –ø—Ä–µ–º–∏—É–º (50‚≠ê –∑–∞ 10 —à—Ç.)
- üé® –£–ª—å—Ç—Ä–∞: 1600x1600px, –ø—Ä–µ–º–∏—É–º (75‚≠ê –∑–∞ 10 —à—Ç.)

üìä –ö–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/create - –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥
/balance - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö QR
/pay - –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Å—ã–ª–∫–∏: 2048 —Å–∏–º–≤–æ–ª–æ–≤
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
- –õ–æ–≥–æ—Ç–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG
- –£–ª—å—Ç—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
    `;

    await ctx.reply(helpMessage);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /pay –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏—É–º-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
bot.command('pay', async (ctx) => {
    try {
        const user = await database.getUser(ctx.from.id);
        if (!user) {
            await ctx.reply('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
            return;
        }

        const message = `
üí≥ –ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç—ã –¥–ª—è QR-–∫–æ–¥–æ–≤

üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:

1Ô∏è‚É£ –ü–∞–∫–µ—Ç "–°—Ç–∞—Ä—Ç" (High –∫–∞—á–µ—Å—Ç–≤–æ)
   - 10 QR-–∫–æ–¥–æ–≤ 800x800px
   - –¶–µ–Ω–∞: 1 ‚≠êStars

2Ô∏è‚É£ –ü–∞–∫–µ—Ç "–ü—Ä–æ—Ñ–∏" (High –∫–∞—á–µ—Å—Ç–≤–æ)
   - 50 QR-–∫–æ–¥–æ–≤ 800x800px
   - –¶–µ–Ω–∞: 1 ‚≠êStars

3Ô∏è‚É£ –ü–∞–∫–µ—Ç "VIP" (Ultra –∫–∞—á–µ—Å—Ç–≤–æ)
   - 10 QR-–∫–æ–¥–æ–≤ 1600x1600px
   - –¶–µ–Ω–∞: 1 ‚≠êStars

4Ô∏è‚É£ –ü–∞–∫–µ—Ç "Premium" (Ultra –∫–∞—á–µ—Å—Ç–≤–æ)
   - 50 QR-–∫–æ–¥–æ–≤ 1600x1600px
   - –¶–µ–Ω–∞: 1 ‚≠êStars

–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:
üì± –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: ${user.freeStandardAvailable} —à—Ç.
üñ•Ô∏è High: ${user.premiumHighAvailable} —à—Ç.
üé® Ultra: ${user.premiumUltraAvailable} —à—Ç.

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–∫–µ—Ç–∞ (1-4):
        `;

        await ctx.reply(message, Markup.inlineKeyboard([
            [
                Markup.button.callback('1Ô∏è‚É£ –°—Ç–∞—Ä—Ç (1‚≠ê)', 'buy_high_10'),
                Markup.button.callback('2Ô∏è‚É£ –ü—Ä–æ—Ñ–∏ (1‚≠ê)', 'buy_high_50')
            ],
            [
                Markup.button.callback('3Ô∏è‚É£ VIP (1‚≠ê)', 'buy_ultra_10'),
                Markup.button.callback('4Ô∏è‚É£ Premium (1‚≠ê)', 'buy_ultra_50')
            ]
        ]));
    } catch (error) {
        console.error('Error in /pay:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
bot.action(/^buy_(high|ultra)_(\d+)$/, async (ctx) => {
    try {
        const match = ctx.match;
        const quality = match[1]; // 'high' –∏–ª–∏ 'ultra'
        const quantity = parseInt(match[2]); // 10 –∏–ª–∏ 50

        let title: string;
        let description: string;
        let amount: number;

        if (quality === 'high') {
            amount = 1; // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            title = quantity === 10 ? '‚≠ê –°—Ç–∞—Ä—Ç –ø–∞–∫–µ—Ç' : '‚≠ê –ü—Ä–æ—Ñ–∏ –ø–∞–∫–µ—Ç';
            description = `${quantity} QR-–∫–æ–¥–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (800x800px)`;
        } else {
            amount = 1; // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            title = quantity === 10 ? '‚≠ê VIP –ø–∞–∫–µ—Ç' : '‚≠ê Premium –ø–∞–∫–µ—Ç';
            description = `${quantity} QR-–∫–æ–¥–æ–≤ —É–ª—å—Ç—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (1600x1600px)`;
        }

        await ctx.replyWithInvoice({
            title,
            description,
            payload: `${quality}_${quantity}_${ctx.from.id}_${Date.now()}`,
            provider_token: '',
            currency: 'XTR',
            prices: [
                { label: `–ü–∞–∫–µ—Ç ${quantity} —à—Ç.`, amount },
            ],
        });

        await ctx.answerCbQuery();
    } catch (error) {
        console.error('Error in buy action:', error);
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout query
bot.on('pre_checkout_query', async (ctx) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏
        await ctx.answerPreCheckoutQuery(true);
    } catch (error) {
        console.error('Error handling pre-checkout query:', error);
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ query —Å –æ—à–∏–±–∫–æ–π
            await ctx.telegram.answerPreCheckoutQuery(ctx.preCheckoutQuery.id, false);
        } catch {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å
            console.error('Could not send error message');
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
bot.on('successful_payment', async (ctx) => {
    try {
        const paymentId = ctx.message.successful_payment.telegram_payment_charge_id;
        const totalAmount = ctx.message.successful_payment.total_amount;
        const payload = ctx.message.successful_payment.invoice_payload;
        
        console.log(`Payment successful: ${paymentId}, amount: ${totalAmount} XTR, payload: ${payload}`);
        
        // –ü–∞—Ä—Å–∏–º payload –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        const payloadParts = payload.split('_');
        if (payloadParts.length >= 3) {
            const quality = payloadParts[0]; // 'high' –∏–ª–∏ 'ultra'
            const quantity = parseInt(payloadParts[1]); // 10 –∏–ª–∏ 50
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
            await database.savePayment({
                tgUserId: ctx.from.id,
                telegramPaymentChargeId: paymentId,
                payload: payload,
                amount: totalAmount,
                currency: 'XTR',
                status: 'completed',
                timestamp: new Date(),
                productType: quality === 'high' ? 'high_quality' : 'ultra_quality',
                quantity: quantity
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (quality === 'high' || quality === 'ultra') {
                await database.addPremiumQR(ctx.from.id, quality as 'high' | 'ultra', quantity);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞
            const user = await database.getUser(ctx.from.id);
            
            await ctx.reply(
                `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n\n` +
                `üí≥ ID –ø–ª–∞—Ç–µ–∂–∞: ${paymentId}\n` +
                `üí∞ –°—É–º–º–∞: ${totalAmount} ‚≠êStars\n\n` +
                `üì¶ –ü–æ–ª—É—á–µ–Ω–æ:\n` +
                `${quality === 'high' ? 'üñ•Ô∏è' : 'üé®'} ${quantity} QR-–∫–æ–¥–æ–≤ ${quality === 'high' ? '–≤—ã—Å–æ–∫–æ–≥–æ' : '—É–ª—å—Ç—Ä–∞'} –∫–∞—á–µ—Å—Ç–≤–∞\n\n` +
                `üìä –í–∞—à –±–∞–ª–∞–Ω—Å:\n` +
                `üì± –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: ${user?.freeStandardAvailable} —à—Ç.\n` +
                `üñ•Ô∏è High: ${user?.premiumHighAvailable} —à—Ç.\n` +
                `üé® Ultra: ${user?.premiumUltraAvailable} —à—Ç.\n\n` +
                `–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ QR-–∫–æ–¥—ã!`
            );
        }
    } catch (error) {
        console.error('Error handling successful payment:', error);
        await ctx.reply('–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ /paysupport');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /paysupport (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ Telegram)
bot.command('paysupport', async (ctx) => {
    await ctx.reply(
        'üí≥ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º\n\n' +
        '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π –∏–ª–∏ –¥–æ—Å—Ç—É–ø–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n' +
        '1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å Stars –≤ @PremiumBot\n' +
        '2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n' +
        '3. –ù–∞–ø–∏—à–∏—Ç–µ /support –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏\n\n' +
        '–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.'
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /support (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ Telegram)
bot.command('support', async (ctx) => {
    await ctx.reply(
        'üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n' +
        '–ß–µ–º –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å?\n\n' +
        'üìã –ü–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞: /help\n' +
        'üí≥ –ü–æ –ø–ª–∞—Ç–µ–∂–∞–º: /paysupport\n' +
        'üìñ –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /terms\n\n' +
        '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º!'
    );
});


bot.command('terms', async (ctx) => {
    const termsMessage = `
üìã –£–°–õ–û–í–ò–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏. –ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ –≤—Å–µ–º–∏ –Ω–∏–∂–µ–ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

1Ô∏è‚É£ –û–ü–ò–°–ê–ù–ò–ï –£–°–õ–£–ì–ò
–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö QR-–∫–æ–¥–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤.

2Ô∏è‚É£ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö: 2048 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ª–æ–≥–æ—Ç–∏–ø–æ–≤: SVG
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ—Ç–∏–ø–∞: 10 –ú–ë
‚Ä¢ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –Ω–µ –±–æ–ª–µ–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

3Ô∏è‚É£ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –°–û–ë–°–¢–í–ï–ù–ù–û–°–¢–¨
‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞, –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∞—à–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é
‚Ä¢ –í—ã –Ω–µ—Å–µ—Ç–µ –ø–æ–ª–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ QR-–∫–æ–¥–æ–≤
‚Ä¢ –ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–æ–≤ –¥–ª—è –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

4Ô∏è‚É£ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò
‚Ä¢ –ú—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º 100% –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω—É—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
‚Ä¢ –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Ç–µ—Ä—é –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–±–æ–∏ —Å–µ—Ä–≤–∏—Å–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è "–∫–∞–∫ –µ—Å—Ç—å" –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≥–∞—Ä–∞–Ω—Ç–∏–π
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ —Å—É–º–º–æ–π –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞

5Ô∏è‚É£ –ü–õ–ê–¢–ï–ñ–ò –ò –†–ï–§–ê–ù–î–´
‚Ä¢ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Telegram Stars —è–≤–ª—è—é—Ç—Å—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º–∏
‚Ä¢ –†–µ—Ñ–∞–Ω–¥—ã –≤–æ–∑–º–æ–∂–Ω—ã —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–±–æ–µ–≤
‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–∞–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞
‚Ä¢ –ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã

6Ô∏è‚É£ –ó–ê–ü–†–ï–©–ï–ù–ù–ê–Ø –î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–¨
–ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –¥–ª—è:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∏—à–∏–Ω–≥–∞ –∏–ª–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
‚Ä¢ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û –∏–ª–∏ –≤–∏—Ä—É—Å–æ–≤
‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü
‚Ä¢ –°–ø–∞–º–∞ –∏ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–æ–≤ –¥–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –û–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

7Ô∏è‚É£ –ü–†–ò–í–ê–¢–ù–û–°–¢–¨ –ò –î–ê–ù–ù–´–ï
‚Ä¢ –ú—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏ QR-–∫–æ–¥—ã
‚Ä¢ –õ–æ–≥–æ—Ç–∏–ø—ã —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ü–µ–ª—è—Ö —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
‚Ä¢ –í–∞—à Telegram ID –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±–æ—Ç–∞

8Ô∏è‚É£ –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø –£–°–õ–£–ì–ò
‚Ä¢ –ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ–∑–Ω–∞—á–∞–µ—Ç –≤–∞—à—É —Å–æ–≥–ª–∞—Å–Ω–æ—Å—Ç—å

9Ô∏è‚É£ –ë–õ–û–ö–ò–†–û–í–ö–ê –ò –ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï
–ú—ã –∏–º–µ–µ–º –ø—Ä–∞–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞:
‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ —ç—Ç–∏—Ö —É—Å–ª–æ–≤–∏–π
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–∏—Å
‚Ä¢ –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

üîü –ü–†–ò–ú–ï–ù–ò–ú–û–ï –ü–†–ê–í–û
–≠—Ç–∏ —É—Å–ª–æ–≤–∏—è —Ä–µ–≥—É–ª–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏–º–µ–Ω–∏–º—ã–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º. –õ—é–±—ã–µ —Å–ø–æ—Ä—ã —Ä–∞–∑—Ä–µ—à–∞—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –º–µ—Å—Ç–Ω—ã–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.

1Ô∏è‚É£1Ô∏è‚É£ –ö–û–ù–¢–ê–ö–¢–´ –ò –ü–û–î–î–ï–†–ñ–ö–ê
–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: /support
–í–æ–ø—Ä–æ—Å—ã –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º: /paysupport
Email –ø–æ–¥–¥–µ—Ä–∂–∫–∏: support@qrbot.local

1Ô∏è‚É£2Ô∏è‚É£ –°–û–ì–õ–ê–°–ò–ï
–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /create, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ:
‚úÖ –ü—Ä–æ—á–∏—Ç–∞–ª–∏ –∏ –ø–æ–Ω—è–ª–∏ —ç—Ç–∏ —É—Å–ª–æ–≤–∏—è
‚úÖ –°–æ–≥–ª–∞—Å–Ω—ã —Å–æ –≤—Å–µ–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
‚úÖ –ù–µ—Å–µ—Ç–µ –ø–æ–ª–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚úÖ –ù–µ –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –¥–ª—è –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ–∫—Ç—è–±—Ä—å 2025
–í–µ—Ä—Å–∏—è: 1.0
    `;

    await ctx.reply(termsMessage, { parse_mode: 'HTML' });
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥"
bot.hears('üîÑ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥', async (ctx) => {
    const userId = ctx.from.id;
    userStates.set(userId, { awaitingChoice: false, awaitingLogo: false, awaitingUrl: false, awaitingQuality: false, awaitingRenderSettings: true });

    await ctx.reply(
        '–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –º–æ–¥—É–ª–µ–π QR-–∫–æ–¥–∞:',
        Markup.keyboard([
            ['–ö–≤–∞–¥—Ä–∞—Ç—ã', '–°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ'],
            ['–ö—Ä—É–≥–ª—ã–µ'],
            ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
        ]).resize()
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
bot.hears('–ö–≤–∞–¥—Ä–∞—Ç—ã', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    
    if (state?.awaitingRenderSettings) {
        state.renderSettings = renderSettingsPresets['–ö–≤–∞–¥—Ä–∞—Ç—ã'];
        state.awaitingRenderSettings = false;
        state.awaitingQuality = true;
        userStates.set(userId, state);

        await ctx.reply(
            '–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ QR-–∫–æ–¥–∞:',
            Markup.keyboard([
                ['üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (400px)', 'üñ•Ô∏è –í—ã—Å–æ–∫–æ–µ (800px)'],
                ['üé® –£–ª—å—Ç—Ä–∞ (1600px)'],
                ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
            ]).resize()
        );
    }
});

bot.hears('–°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    
    if (state?.awaitingRenderSettings) {
        state.renderSettings = renderSettingsPresets['–°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ'];
        state.awaitingRenderSettings = false;
        state.awaitingQuality = true;
        userStates.set(userId, state);

        await ctx.reply(
            '–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ QR-–∫–æ–¥–∞:',
            Markup.keyboard([
                ['üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (400px)', 'üñ•Ô∏è –í—ã—Å–æ–∫–æ–µ (800px)'],
                ['üé® –£–ª—å—Ç—Ä–∞ (1600px)'],
                ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
            ]).resize()
        );
    }
});

bot.hears('–ö—Ä—É–≥–ª—ã–µ', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    
    if (state?.awaitingRenderSettings) {
        state.renderSettings = renderSettingsPresets['–ö—Ä—É–≥–ª—ã–µ'];
        state.awaitingRenderSettings = false;
        state.awaitingQuality = true;
        userStates.set(userId, state);

        await ctx.reply(
            '–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ QR-–∫–æ–¥–∞:',
            Markup.keyboard([
                ['üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (400px)', 'üñ•Ô∏è –í—ã—Å–æ–∫–æ–µ (800px)'],
                ['üé® –£–ª—å—Ç—Ä–∞ (1600px)'],
                ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
            ]).resize()
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
bot.hears('üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (400px)', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    
    if (state?.awaitingQuality) {
        state.awaitingQuality = false;
        state.awaitingChoice = true;
        state.quality = 'standard';
        userStates.set(userId, state);

        await ctx.reply(
            '–í—ã–±–µ—Ä–∏ —Ç–∏–ø QR-–∫–æ–¥–∞:',
            Markup.keyboard([
                ['‚úÖ –° –ª–æ–≥–æ—Ç–∏–ø–æ–º'],
                ['‚ùå –ë–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞'],
                ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
            ]).resize()
        );
    }
});

bot.hears('üñ•Ô∏è –í—ã—Å–æ–∫–æ–µ (800px)', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    
    if (state?.awaitingQuality) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å High –∫–∞—á–µ—Å—Ç–≤–∞
        const user = await database.getUser(userId);
        
        if (!user || user.premiumHighAvailable <= 0) {
            await ctx.reply(
                `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö QR-–∫–æ–¥–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (800x800px)\n\n` +
                `–í–∞—à –±–∞–ª–∞–Ω—Å: ${user?.premiumHighAvailable || 0} —à—Ç.\n\n` +
                `üí≥ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay\n\n` +
                `üì± –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (400x400px)`,
                Markup.keyboard([
                    ['üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (400px)', 'üé® –£–ª—å—Ç—Ä–∞ (1600px)'],
                    ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
                ]).resize()
            );
            return;
        }
        
        state.awaitingQuality = false;
        state.awaitingChoice = true;
        state.quality = 'high';
        userStates.set(userId, state);

        await ctx.reply(
            `‚úÖ –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø! (–û—Å—Ç–∞–ª–æ—Å—å: ${user.premiumHighAvailable} —à—Ç.)\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø QR-–∫–æ–¥–∞:`,
            Markup.keyboard([
                ['‚úÖ –° –ª–æ–≥–æ—Ç–∏–ø–æ–º'],
                ['‚ùå –ë–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞'],
                ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
            ]).resize()
        );
    }
});

bot.hears('üé® –£–ª—å—Ç—Ä–∞ (1600px)', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    
    if (state?.awaitingQuality) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ultra –∫–∞—á–µ—Å—Ç–≤–∞
        const user = await database.getUser(userId);
        
        if (!user || user.premiumUltraAvailable <= 0) {
            await ctx.reply(
                `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö QR-–∫–æ–¥–æ–≤ —É–ª—å—Ç—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (1600x1600px)\n\n` +
                `–í–∞—à –±–∞–ª–∞–Ω—Å: ${user?.premiumUltraAvailable || 0} —à—Ç.\n\n` +
                `üí≥ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay\n\n` +
                `üì± –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ`,
                Markup.keyboard([
                    ['üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (400px)', 'üñ•Ô∏è –í—ã—Å–æ–∫–æ–µ (800px)'],
                    ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
                ]).resize()
            );
            return;
        }
        
        state.awaitingQuality = false;
        state.awaitingChoice = true;
        state.quality = 'ultra';
        userStates.set(userId, state);

        await ctx.reply(
            `‚úÖ –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø! (–û—Å—Ç–∞–ª–æ—Å—å: ${user.premiumUltraAvailable} —à—Ç.)\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø QR-–∫–æ–¥–∞:`,
            Markup.keyboard([
                ['‚úÖ –° –ª–æ–≥–æ—Ç–∏–ø–æ–º'],
                ['‚ùå –ë–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞'],
                ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
            ]).resize()
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–° –ª–æ–≥–æ—Ç–∏–ø–æ–º"
bot.hears('‚úÖ –° –ª–æ–≥–æ—Ç–∏–ø–æ–º', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    
    if (state?.awaitingChoice) {
        state.awaitingChoice = false;
        state.awaitingLogo = true;
        state.awaitingUrl = false;
        userStates.set(userId, state);

        await ctx.reply(
            '–û—Ç–ø—Ä–∞–≤—å –ª–æ–≥–æ—Ç–∏–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG.',
            Markup.keyboard([
                ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
            ]).resize()
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ë–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞"
bot.hears('‚ùå –ë–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    
    if (state?.awaitingChoice) {
        state.awaitingChoice = false;
        state.awaitingLogo = false;
        state.awaitingUrl = true;
        userStates.set(userId, state);

        const qualityText = state.quality === 'ultra' ? '—É–ª—å—Ç—Ä–∞' : 
                           state.quality === 'high' ? '–≤—ã—Å–æ–∫–æ–º' : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º';
        
        await ctx.reply(
            `–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è QR-–∫–æ–¥–∞ –≤ ${qualityText} –∫–∞—á–µ—Å—Ç–≤–µ.`,
            Markup.keyboard([
                ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
            ]).resize()
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
bot.hears('üîô –û—Ç–º–µ–Ω–∏—Ç—å', async (ctx) => {
    const userId = ctx.from.id;
    userStates.delete(userId);

    await ctx.reply(
        '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        Markup.keyboard([
            ['üîÑ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥']
        ]).resize()
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
bot.on('photo', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);

    if (state?.awaitingLogo) {
        try {
            const photo = ctx.message.photo[ctx.message.photo.length - 1];
            const file = await ctx.telegram.getFile(photo.file_id);
            const logoPath = path.join(__dirname, 'temp', `logo_${Date.now()}.svg`);
            
            // –°–∫–∞—á–∏–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø
            await downloadFile(`https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`, logoPath);

            state.logoPath = logoPath;
            state.awaitingLogo = false;
            state.awaitingUrl = true;
            userStates.set(userId, state);

            const qualityText = state.quality === 'ultra' ? '—É–ª—å—Ç—Ä–∞' : 
                               state.quality === 'high' ? '–≤—ã—Å–æ–∫–æ–º' : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º';
            
            await ctx.reply(
                `–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è QR-–∫–æ–¥–∞ –≤ ${qualityText} –∫–∞—á–µ—Å—Ç–≤–µ.`,
                Markup.keyboard([
                    ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
                ]).resize()
            );
        } catch (error) {
            console.error('Error processing logo:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SVG-–¥–æ–∫—É–º–µ–Ω—Ç–∞
bot.on('document', async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);

    if (state?.awaitingLogo) {
        try {
            const document = ctx.message.document;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ SVG
            if (!document.file_name || !document.file_name.endsWith('.svg')) {
                await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG.');
                return;
            }
            const file = await ctx.telegram.getFile(document.file_id);
            const logoPath = path.join(__dirname, 'temp', `logo_${Date.now()}.svg`);
            await downloadFile(`https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`, logoPath);

            state.logoPath = logoPath;
            state.awaitingLogo = false;
            state.awaitingUrl = true;
            userStates.set(userId, state);

            const qualityText = state.quality === 'ultra' ? '—É–ª—å—Ç—Ä–∞' : 
                               state.quality === 'high' ? '–≤—ã—Å–æ–∫–æ–º' : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º';
            
            await ctx.reply(
                `–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è QR-–∫–æ–¥–∞ –≤ ${qualityText} –∫–∞—á–µ—Å—Ç–≤–µ.`,
                Markup.keyboard([
                    ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
                ]).resize()
            );
        } catch (error) {
            console.error('Error processing SVG logo:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on(message('text'), async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    const text = ctx.message.text;

    if (state?.awaitingUrl) {
        let processedUrl: string;
        try {
            processedUrl = processUrl(text);
            new URL(processedUrl);
        } catch {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É!');
            return;
        }

        try {
            const quality = state.quality || 'standard';
            const renderSettings = state.renderSettings;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
            let hasAccess = false;
            let remaining = 0;
            
            if (quality === 'standard') {
                hasAccess = await database.useFreeStandardQR(userId);
                if (hasAccess) {
                    const user = await database.getUser(userId);
                    remaining = user?.freeStandardAvailable || 0;
                } else {
                    await ctx.reply(
                        '‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ QR-–∫–æ–¥—ã!\n\n' +
                        'üí≥ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç—ã.'
                    );
                    return;
                }
            } else if (quality === 'high') {
                hasAccess = await database.usePremiumHighQR(userId);
                if (hasAccess) {
                    const user = await database.getUser(userId);
                    remaining = user?.premiumHighAvailable || 0;
                } else {
                    await ctx.reply(
                        '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö QR-–∫–æ–¥–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞!\n\n' +
                        'üí≥ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç.'
                    );
                    return;
                }
            } else if (quality === 'ultra') {
                hasAccess = await database.usePremiumUltraQR(userId);
                if (hasAccess) {
                    const user = await database.getUser(userId);
                    remaining = user?.premiumUltraAvailable || 0;
                } else {
                    await ctx.reply(
                        '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö QR-–∫–æ–¥–æ–≤ —É–ª—å—Ç—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞!\n\n' +
                        'üí≥ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç.'
                    );
                    return;
                }
            }
            
            if (!hasAccess) {
                return;
            }
            
            const qrCodePath = await generateQRWithLogo(processedUrl, state.logoPath, quality, renderSettings);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
            await ctx.replyWithPhoto({ source: qrCodePath });

            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userStates.delete(userId);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            const qualityEmoji = quality === 'standard' ? 'üì±' : quality === 'high' ? 'üñ•Ô∏è' : 'üé®';
            const qualityName = quality === 'standard' ? '–°—Ç–∞–Ω–¥–∞—Ä—Ç' : quality === 'high' ? '–í—ã—Å–æ–∫–æ–µ' : '–£–ª—å—Ç—Ä–∞';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"
            await ctx.reply(
                `‚úÖ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (${qualityName})!\n\n` +
                `${qualityEmoji} –û—Å—Ç–∞–ª–æ—Å—å: ${remaining} —à—Ç.`,
                Markup.keyboard([
                    ['üîÑ –°–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥']
                ]).resize()
            );

            // –£–¥–∞–ª—è–µ–º QR-—Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if (fs.existsSync(qrCodePath)) {
                try {
                    fs.unlinkSync(qrCodePath);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ QR-—Ñ–∞–π–ª–∞ ${qrCodePath}:`, error);
                }
            }

            // –£–¥–∞–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
            if (state.logoPath && fs.existsSync(state.logoPath)) {
                try {
                    fs.unlinkSync(state.logoPath);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ ${state.logoPath}:`, error);
                }
            }

        } catch (error) {
            console.error('Error generating QR code:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
async function startBot() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await database.initialize();
        console.log('‚úÖ Database initialized');

        // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.launch();
        console.log('‚úÖ Bot started successfully!');
    } catch (error) {
        console.error('‚ùå Error starting bot:', error);
        process.exit(1);
    }
}

startBot();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', async () => {
    cleanupTempFolder();
    await database.close();
    bot.stop('SIGINT');
    process.exit(0);
});
process.once('SIGTERM', async () => {
    cleanupTempFolder();
    await database.close();
    bot.stop('SIGTERM');
    process.exit(0);
}); 